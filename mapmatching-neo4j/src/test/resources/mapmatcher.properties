# properties for map matching (offline and online map matching)

# search radius in meter
mapmatcher.maxMatchingRadiusInMeter = 30
# initial search radius in meter
mapmatcher.intialRadiusMeter = 150
# number of points for a valid initial segment's match
mapmatcher.nrOfPointsForInitialMatch = 1
# maximum number of segments of a shortest path search
mapmatcher.maxSegmentsForShortestPath = 60
# minimum number of track points
mapmatcher.minNrOfPoints = 2
# minimum track length
mapmatcher.minLength = 0
# minimum number of matching segments per section
mapmatcher.minSegmentsPerSection = 3
# maximum speeds per routing mode and frc/urban
mapmatcher.maxSpeedForRoutingJson = {"speedsPerRoutingMode" : {"CAR": {"defaultSpeed": 93, "frcOverrides": {"0": 138, "1": 115, "2": 104, "3": 104, "4": 104}, "urbanEnabled": false, "urbanSpeed": 70}, "BIKE": {"defaultSpeed": 50}, "PEDESTRIAN": {"defaultSpeed": 20}}}
# maximum tries to expand paths without any resulting extension 
mapmatcher.maxCountLoopsWithoutPathExtension = 15
# envelope side length used to determine next valid track point for searching start segment
mapmatcher.envelopeSideLengthForStartSegmentSearch = 50
# maximum number of best resulting paths with which will be processed preferable
mapmatcher.maxNrOfBestPaths = 5
# delay of timeout scheduler in ms (internal)
mapmatcher.timeout.delay = 1000
# timeout expiration delay of a map matching task in ms
mapmatcher.timeout.expireTime = 3000
# timespan (in seconds) between trackpoints which defines if a given sampling interval is low
mapmatcher.thresholdForLowSamplingsInSecs = 7
# for shortest path searches a track point will be identified creating a routed path to; in some cases this track point has a big GPS error so routing
# will not be successful; then the algorithm will try the next n points as routing targets;
# statistically this methodology results in worse paths for higher sampling intervals
mapmatcher.thresholdSamplingIntervalInSecsForTryingFurtherPathSearches = 90
# In case of routing we won't route for parts of track which possibly left the underlying graph. Usually such parts of track consist of a number of valid
# GPS points. In that case we want to skip routing and start a new path, which means we create a gap within the routing paths. On the other hand routing 
# makes sense in case of GPS errors. For such parts of a track we have to consider only a few GPS points, possibly partly invalid because of GPS error.
# To differ those cases we need a threshold: the maximum time difference of points we want consider for routing (difference between last matched point and first
# point which determines a target segment for routing). If the time difference of points considered for routing exceed this threshold a new path will be created.
# In case of low sampled tracks this value will be automatically divided in half.
# (time threshold in minutes)
#mapmatcher.pointsDiffThresholdForSkipRouting = 10
mapmatcher.pointsDiffThresholdForSkipRouting = 5

# routing mode: possible values are: "car" / "bike" / "pedestrian" / "" ("" means no filtering of access types within routing, default is "car")
mapmatcher.routingMode=
#mapmatcher.routingMode=bike
# routing criteria: possible values are: "length" / "min_duration" / "current_duration" (default is "length")
mapmatcher.routingCriteria=min_duration
# routing algorithm: possible values are: "DIJKSTRA" / "BIDIRECTIONAL_DIJKSTRA" (default is "DIJKSTRA")
#mapmatcher.routingAlgorithm=DIJKSTRA
mapmatcher.routingAlgorithm=BIDIRECTIONAL_DIJKSTRA

# enable extended path matching: search path between two track points without routing
mapmatcher.extendedPathMatching.enable=true
# maximum distance of path between two track points in meter
mapmatcher.extendedPathMatching.maxDistance=350

# CSV logger for logging map matching statistics
#mapmatcher.csvLoggerName = mapMatchingLogger
mapmatcher.csvLoggerName = 